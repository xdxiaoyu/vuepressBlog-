(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{189:function(n,s,a){"use strict";a.r(s);var t=a(6),e=Object(t.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[n._v("#")]),n._v(" JavaScript")]),n._v(" "),a("h2",{attrs:{id:"一-什么是javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-什么是javascript"}},[n._v("#")]),n._v(" 一.什么是JavaScript")]),n._v(" "),a("h3",{attrs:{id:"_1、javascript历史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、javascript历史"}},[n._v("#")]),n._v(" 1、JavaScript历史")]),n._v(" "),a("p",[n._v("​\t1995年，JavaScript诞生于网景公司一位Brenda Eich的工程师手上")]),n._v(" "),a("p",[n._v("​\t1998年，ISO和IEC将ECMAScript采纳为标准（ISO/IEC-16262）。自此以后，各家浏览器均已ECMAScript作为自己JavaScripe实现的依据，虽然具体实现各有不同。")]),n._v(" "),a("h3",{attrs:{id:"_2、javascript实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、javascript实现"}},[n._v("#")]),n._v(" 2、JavaScript实现")]),n._v(" "),a("p",[n._v("​\t虽然JavaScript和ECMAScript基本上是同义词，但是JavaScript远远不限于ECMA-262所定义的那样。完整的JavaScript实现包含以下几个部分：")]),n._v(" "),a("ul",[a("li",[n._v("核心（ECMAScript）")]),n._v(" "),a("li",[n._v("文档对象模型（DOM）")]),n._v(" "),a("li",[n._v("浏览器对象（BOM）")])]),n._v(" "),a("h4",{attrs:{id:"_2-1、ecmascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、ecmascript"}},[n._v("#")]),n._v(" 2.1、ECMAScript")]),n._v(" "),a("p",[n._v("​\tECMAScript，即ECMA-262定义的语言，并不局限于Web浏览器。事实上，这门语言没有输入和输出之类的方法。ECMA-262将这门语言作为一个基准来定义，以便在它之上再构建更稳健的脚本语言。Web浏览器只是ECMAScript实现可能存在的一种"),a("strong",[n._v("宿主环境")]),n._v("。宿主环境提供ECMAScript的基准实现和与环境自身交互必须的扩展。扩展（比如DOM）使用ECMAScript核心类型和语法，提供特定于环境的 额外功能。其他宿主环境还有服务端JavaScript平台Node.js和即将被淘汰的Adobe Flash。")]),n._v(" "),a("blockquote",[a("p",[n._v("如果不涉及浏览器的话，ECMA-262到底定义了什么？在基本的层面，它描述这门语言的如下部分：")]),n._v(" "),a("ul",[a("li",[n._v("语法")]),n._v(" "),a("li",[n._v("类型")]),n._v(" "),a("li",[n._v("语句")]),n._v(" "),a("li",[n._v("关键字")]),n._v(" "),a("li",[n._v("保留字")]),n._v(" "),a("li",[n._v("操作符")]),n._v(" "),a("li",[n._v("全局对象")])])]),n._v(" "),a("p",[n._v("​\tECMAScript只是对实现这个规范描述的所有方面的一门语言的称呼。JavaScript实现ECMAScript，而Adobe ActionScript同样也实现了ECMAScript。")]),n._v(" "),a("blockquote",[a("p",[n._v("ECMA-262第6版本，俗称ES6、ES2015，发布于2015年6月。这一版包含了大概这个规范有史以来最重要的一批增强特性。")]),n._v(" "),a("p",[n._v(".....")]),n._v(" "),a("p",[n._v("ECMA-262第10版本，也称ES10、ES2019，发布于2019年6月。修订内容大家可网上自行查阅。")]),n._v(" "),a("p",[n._v("ECMA-262第11版本，也称ES11、ES2020，发布于2020年6月。修订内容大家可网上自行查阅。")])]),n._v(" "),a("h4",{attrs:{id:"_2-2、dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、dom"}},[n._v("#")]),n._v(" 2.2、DOM")]),n._v(" "),a("p",[n._v("​\t"),a("strong",[n._v("文档对象模型")]),n._v("（DOM）是一个应用编程接口(API)，用于在HTML中使用扩展的XML。DOM将整个页面抽象为一组分层节点。HTML或XML页面的每个组成部分都是一种节点，包含不同数据。")]),n._v(" "),a("blockquote",[a("p",[n._v("DOM通过创建表示文档的树，让开发者可以随性所欲地控制网页的内容和结构。使用DOM API，可以轻松删除、添加、替换、修改节点。")])]),n._v(" "),a("p",[n._v("①、为什么DOM是必需的")]),n._v(" "),a("p",[n._v("​\t浏览器支持不同形态的动态HTML（DHTML）的情况下，开发者首先可以做到不刷新页面而修改页面外观和内容。这代表web技术的一个巨大进步，但也暴露了很大的问题。由于网景和微软采用不同思路开发DHTML，开发者写一个HTML页面就可以在任何浏览器中运行的好日子就此终结。")]),n._v(" "),a("p",[n._v("​\t为了保持Web跨平台的本性，万维网联盟（W3C）开始制定DOM标准进程")]),n._v(" "),a("h4",{attrs:{id:"_2-3、bom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3、bom"}},[n._v("#")]),n._v(" 2.3、BOM")]),n._v(" "),a("p",[n._v("​\t浏览器提供了"),a("strong",[n._v("浏览器对象模型")]),n._v("（BOM）API，用于支持访问和操作浏览器的窗口。使用DOM，开发者可以操控浏览器显示页面之外的部分。而BOM真正独一无二的地方，当然也是问题最多的地方，就是它是唯一一个没有相关标准的JavaScript实现。")]),n._v(" "),a("p",[n._v("​\tHTML5改变了这个局面，这个版本的HTML以正式规范的形式涵盖了尽可能多的BOM特性问题。")]),n._v(" "),a("h3",{attrs:{id:"_3、javascript的不同版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、javascript的不同版本"}},[n._v("#")]),n._v(" 3、JavaScript的不同版本")]),n._v(" "),a("blockquote",[a("p",[n._v("多数浏览器对JavaScript的支持指的是实现ECMAScript和DOM的程度。")])]),n._v(" "),a("h3",{attrs:{id:"_4、小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、小结"}},[n._v("#")]),n._v(" 4、小结")]),n._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[n._v("JavaScript是一门用来与网页交互的脚本语言。\n包含以下三个组成部分：\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),n._v(" ECMAScript：由"),a("span",{pre:!0,attrs:{class:"token constant"}},[n._v("ECMA")]),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("262")]),n._v("定义并提供核心功能。\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),n._v(" 文档对象模型（"),a("span",{pre:!0,attrs:{class:"token constant"}},[n._v("DOM")]),n._v("）：提供与网页内容交互的方法和接口。\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),n._v(" 浏览器对象模型（"),a("span",{pre:!0,attrs:{class:"token constant"}},[n._v("BOM")]),n._v("）：提供与浏览器交互的方法和接口。\n")])])]),a("blockquote",[a("p",[n._v("JavaScript的这三个部分得到了五大浏览器（IE、FireFox、Chrome、Safari、Open）不同程度的支持。所有浏览器基本都对ES5（ECMAScript5）提供了完善的支持，而对ES6和ES7的支持度也在不断提升。浏览器对DOM的支持各部相同，但对Level3的支持日益趋于规范。HTML5中收录的BOM会因浏览器而异，不过开发者仍然可以假定存在很大一部分公共特性。")])]),n._v(" "),a("h2",{attrs:{id:"二、html中的javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、html中的javascript"}},[n._v("#")]),n._v(" 二、HTML中的JavaScript")]),n._v(" "),a("h3",{attrs:{id:"_1、-script-元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、-script-元素"}},[n._v("#")]),n._v(" 1、"),a("code",[n._v("<script>")]),n._v("元素")]),n._v(" "),a("p",[n._v("包含在"),a("script",[n._v("内的代码会被从上到下解释。上述例子，被解释的是一个函数定义，并且该函数会被保存在解释器环境中。在 ")]),n._v(" 元素中的代码被计算完成之前，页面的其余内容不会被加载，也不会被显示。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('\n\n\n2. 通过它在网页中包含外部JavaScript文件。\n\n> 要包含外部文件中的JavaScript，就必须使用`src`这个属性。这个属性的值是一个URL，指向包含JavaScript代码的文件。\n\n```html\n<script src="example.js"><\/script>\n\n上述例子在页面中加载了一个名为example.js的外部文件。文件本身只需要包含要放在<script>的起始及结束标签中的JavaScript代码。于解释行内JavaScript一样，在解释外部JavaScript文件时，页面也会阻塞。（阻塞时间也包含下载文件的时间。）在XHTML文档中，可以忽略结束标签，比如：\n\n<script src="example.js">\n')])])]),a("p",[n._v("以上语法不能在HTML文件中使用，因为它是无效的HTML，有些浏览器不能正常，比如IE。")]),n._v(" "),a("blockquote",[a("p",[a("strong",[n._v("注意")]),n._v("    按照惯例，外部JavaScript文件的扩展名是js。这不是必需的，因为浏览器不会检查所包含的JavaScript文件的扩展名。这就为使用服务器端脚本语言（如TypeScript，或React的JSX）转译为JavaScript提供了可能性。不过要注意，服务器经常会根据文件扩展来确定响应的正确MIME类型。如果不打算使用.js扩展名，一定要确保服务器能返回正确的MIME类型。")]),n._v(" "),a("p",[n._v("MIME类型：是设定某种"),a("a",{attrs:{href:"https://baike.baidu.com/item/%E6%89%A9%E5%B1%95%E5%90%8D/103577",target:"_blank",rel:"noopener noreferrer"}},[n._v("扩展名"),a("OutboundLink")],1),n._v("的"),a("a",{attrs:{href:"https://baike.baidu.com/item/%E6%96%87%E4%BB%B6/6270998",target:"_blank",rel:"noopener noreferrer"}},[n._v("文件"),a("OutboundLink")],1),n._v("用一种"),a("a",{attrs:{href:"https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/5985445",target:"_blank",rel:"noopener noreferrer"}},[n._v("应用程序"),a("OutboundLink")],1),n._v("来打开的方式类型，当该扩展名文件被访问的时候，"),a("a",{attrs:{href:"https://baike.baidu.com/item/%E6%B5%8F%E8%A7%88%E5%99%A8/213911",target:"_blank",rel:"noopener noreferrer"}},[n._v("浏览器"),a("OutboundLink")],1),n._v("会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。")])]),n._v(" "),a("h4",{attrs:{id:"_1-1-标签占位符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-标签占位符"}},[n._v("#")]),n._v(" 1.1 标签占位符")]),n._v(" "),a("p",[n._v("​\t过去，所有的"),a("code",[n._v("<script>")]),n._v("元素都被放在页面的"),a("code",[n._v("<head>")]),n._v("标签内。对于很多需要JavaScript的页面，这会导致页面渲染的明显延迟，此期间浏览器窗口完全空白。为解决这个问题，现代Web应用程序通常将所有JavaScript引用放在"),a("code",[n._v("<body>")]),n._v("元素中的页面内容后面。")]),n._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token doctype"}},[n._v("<!DOCTYPE html>")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("html")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("head")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("title")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("</")]),n._v("title")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("script")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[n._v("src")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v('"')]),n._v("example.js"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}}),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("</")]),n._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("\x3c!-- 之前的写法 --\x3e")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("</")]),n._v("head")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("\x3c!-- 这是页面内容 --\x3e")]),n._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("script")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[n._v("src")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v('"')]),n._v("example.js"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}}),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("</")]),n._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("\x3c!-- 现在的写法 --\x3e")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("</")]),n._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("</")]),n._v("html")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n\n")])])]),a("h4",{attrs:{id:"_1-2-推迟执行脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-推迟执行脚本"}},[n._v("#")]),n._v(" 1.2 推迟执行脚本")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("HTML 4.01为`<script>`元素定义了一个叫`defer`属性。这个属性表示脚本在执行的时候不会改变页面的结构。因此这个脚本完全可以在整个页面解析完之后再运行。在`<script>`元素上设置`defer`属性，会告诉浏览器应该立即开始下载，但执行应该推迟：\n")])])]),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token doctype"}},[n._v("<!DOCTYPE html>")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("html")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("head")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n     "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("title")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("</")]),n._v("title")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("</")]),n._v("head")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("\x3c!-- 这是页面内容 --\x3e")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("script")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[n._v("defer")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[n._v("src")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v('"')]),n._v("example.js"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}}),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("</")]),n._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("</")]),n._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("</")]),n._v("html")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v('\n\n注意  对于XHTML文档，指定defer属性时应该写成defer="defer"。\n')])])]),a("h4",{attrs:{id:"_1-3-异步执行脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-异步执行脚本"}},[n._v("#")]),n._v(" 1.3 异步执行脚本")]),n._v(" "),a("p",[n._v("​\tHTML5位"),a("code",[n._v("<script>")]),n._v("元素定义了"),a("code",[n._v("async")]),n._v("属性。从改变脚本处理方式上看，"),a("code",[n._v("async")]),n._v("属性与"),a("code",[n._v("defer")]),n._v("类似。当然，它们两者也都只适用于外部脚本，都会告诉浏览器立即开始下载。不过，与"),a("code",[n._v("defer")]),n._v("不同的是，标记"),a("code",[n._v("async")]),n._v("的脚本并不保证它们出现的次序执行")]),n._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token doctype"}},[n._v("<!DOCTYPE html>")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("html")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("head")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("title")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("</")]),n._v("title")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("</")]),n._v("head")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("\x3c!-- 这是页面内容 --\x3e")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("script")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[n._v("async")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[n._v("src")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v('"')]),n._v("example.js"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}}),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("</")]),n._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("script")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[n._v("async")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[n._v("src")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v('"')]),n._v("example2.js"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}}),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("</")]),n._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("</")]),n._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("</")]),n._v("html")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("\x3c!--\n\t在这个例子中，第二个脚本可能先于第一个脚本执行。因此，重点在于它们之间没有依赖关系。给脚本添加async属性的目的是告诉浏览器，不必等脚本下载和执行完后再加载页面，同样也不必等到该异步脚本下载和执行后再加载其他脚本。正因为如此，脚步脚步不应该在加载期间修改DOM。\n--\x3e")]),n._v('\n\n注意  对于XHTML文档，指定async属性时应该写成async="async"。\n')])])]),a("h4",{attrs:{id:"_1-4-动态加载脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-动态加载脚本"}},[n._v("#")]),n._v(" 1.4  动态加载脚本")]),n._v(" "),a("p",[n._v("​\t除了"),a("code",[n._v("<script>")]),n._v("标签，还有其他方式可有加载脚本。因为JavaScript可以使用DOM API， 所以通过向DOM中动态添加"),a("code",[n._v("<script>")]),n._v("元素同样可以加载指定脚本。只要创建一个"),a("code",[n._v("<script>")]),n._v("元素并将其添加到DOM即可。")]),n._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" script "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[n._v("'script'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\nscript"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("src "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[n._v("'gibberish.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 当然，在把HTMLElement元素添加到DOM且执行到这段代码之前不会发送请求。默认情况下，以这种方式创建的<script>元素是以异步方式加载的，相当于添加了async属性。不过这种做可能会有问题，因为所有浏览器都支持createElement()方法，但不是所有浏览器都支持async属性。因此，如果要统一动态脚本的加载行为，可以明确将其设置为同步加载：")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" script "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[n._v("'script'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\nscript"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("src "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[n._v("'gibberish.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\nscript"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("async "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[n._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 以这种方式获取的资源对浏览器预加载器是不可见的。这会严重影响它们在资源获取队列中的优先级。根据应用程序的工作方式以及怎么使用，这种方式可能会严重影响性能。要想让预加载器知道这些动态请求文件的存在，可以在文档头部显式声明它们：")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v("link rel"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"preload"')]),n._v(" href"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"gibberish.js"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v(">")]),n._v("\n")])])]),a("h4",{attrs:{id:"_1-5-xhtml中-的变化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-xhtml中-的变化"}},[n._v("#")]),n._v(" 1.5 XHTML中 的变化")]),n._v(" "),a("p",[n._v("​\t可扩展超文本标记语言是将HTML作为XML的应用重新包装的结果。与XHTML不同，在XHTML中使用JavaScript必须指定"),a("code",[n._v("type")]),n._v("属性且值为"),a("code",[n._v("text/javascript")]),n._v("。解析 "),a("code",[n._v("a < b")]),n._v("语句中的小于号（"),a("code",[n._v("<")]),n._v("）会被解析成一个标签的开始，并且由于作为标签开始的小于号后面不能有空格，这样会导致语法错误。避免XHTML中这种语法错误的方式有两种。")]),n._v(" "),a("blockquote",[a("p",[n._v("第一种是把所有小于号（"),a("code",[n._v("<")]),n._v("）都替换成对应的HTML实体形式（"),a("code",[n._v("&lt;")]),n._v("）")])]),n._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("script")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[n._v("type")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v('"')]),n._v("text/javascript"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}},[a("span",{pre:!0,attrs:{class:"token language-javascript"}},[n._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("function")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("compare")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[n._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("&")]),n._v("lt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("else")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v(">")]),n._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"B"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("else")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"AB"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("</")]),n._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n")])])]),a("blockquote",[a("p",[n._v("第二种是把所有代码都包含到一个CDATA块中。在XHTML（及XML）中，CDATA快表示文档中可以包含任意文本的区块，其内容不作为标签来解析，因此可以在其中包含任意字符，包括小于号，且不会引发语法错误。使用CDATA格式如下：")])]),n._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("script")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[n._v("type")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v('"')]),n._v("text/javascript"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}},[a("span",{pre:!0,attrs:{class:"token language-javascript"}},[n._v(" ")]),a("span",{pre:!0,attrs:{class:"token included-cdata"}},[a("span",{pre:!0,attrs:{class:"token cdata"}},[n._v("<![CDATA[")]),a("span",{pre:!0,attrs:{class:"token language-javascript"}},[n._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("function")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("compare")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[n._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("&")]),n._v("lt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("else")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v(">")]),n._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"B"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("else")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"AB"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")]),a("span",{pre:!0,attrs:{class:"token cdata"}},[n._v("]]>")])])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("</")]),n._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n\n在兼容XHTML的浏览器中，这样能解决问题。但在不支持CDATA块的非XHTML兼容浏览器中则不行。为此，CDATA标记必须使用JavaScript注释来抵消。\n\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("script")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[n._v("type")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v('"')]),n._v("text/javascript"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}},[a("span",{pre:!0,attrs:{class:"token language-javascript"}},[n._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//")])]),a("span",{pre:!0,attrs:{class:"token included-cdata"}},[a("span",{pre:!0,attrs:{class:"token cdata"}},[n._v("<![CDATA[")]),a("span",{pre:!0,attrs:{class:"token language-javascript"}},[n._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("function")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("compare")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[n._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("&")]),n._v("lt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("else")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v(">")]),n._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"B"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("else")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"AB"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//")])]),a("span",{pre:!0,attrs:{class:"token cdata"}},[n._v("]]>")])]),a("span",{pre:!0,attrs:{class:"token language-javascript"}},[n._v("\n")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("</")]),n._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n\n这种格式适用于所有现代浏览器。虽然有点黑科技的味道，但它可以通过XHTML验证，而且对XHTML之前的浏览器也能优雅地降级\n")])])]),a("h3",{attrs:{id:"_2、行内代码与外部文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、行内代码与外部文件"}},[n._v("#")]),n._v(" 2、行内代码与外部文件")]),n._v(" "),a("p",[n._v("​\t\t虽然可以直接在HTML文件中嵌入JavaScript代码，但通常认为最佳实践是尽可能将JavaScript代码放在外部文件中。不过这个最佳实践并不是明确的强制性规则。推荐使用外部文件的理由如下。")]),n._v(" "),a("ul",[a("li",[a("strong",[n._v("可维护性")]),n._v("。 JavaScript代码如果分散到很多HTML页面，会导致维护困难。而一个目录保存所有JavaScript文件，则更容易维护，这样开发者就可以独立于使用它们的HTML页面来编辑代码。")]),n._v(" "),a("li",[a("strong",[n._v("缓存")]),n._v("。 浏览器会根据特定的设置缓存所有外部链接的JavaScript文件，这意味着如果两个页面都用到同一个文件，则该文件只需下载一次。这最终意味着页面加载更快。")]),n._v(" "),a("li",[a("strong",[n._v("适应未来")]),n._v("。  通过把JavaScript放到外部文件中，就不必考虑用XHTML或前面提到的注释黑科技。包含外部JavaScript文件的语法在HTML和XHTML中是一样的")])]),n._v(" "),a("h3",{attrs:{id:"_3、文档模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、文档模式"}},[n._v("#")]),n._v(" 3、文档模式")]),n._v(" "),a("blockquote",[a("p",[n._v("最初文档模式有两种："),a("strong",[n._v("混合模式")]),n._v("和"),a("strong",[n._v("标准模式")]),n._v("，后又出现第三种文档模式："),a("strong",[n._v("准标准模式")])])]),n._v(" "),a("h3",{attrs:{id:"_4、-元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、-元素"}},[n._v("#")]),n._v(" 4、 "),a("noscrip",[n._v("元素")])],1),n._v(" "),a("p",[n._v("​\t\t针对早期浏览器不支持JavaScript的问题，需要一个页面优雅的降级的处理方案。最终，"),a("code",[n._v("<noscript>")]),n._v("元素出现，被用于给不支持JavaScript，但对于禁用JavaScript的浏览器来说，这个元素仍然有它的用处。")]),n._v(" "),a("blockquote",[a("p",[a("code",[n._v("<noscript>")]),n._v("元素可以包含任何可以出现在")]),a("body",[n._v("中的HTML元素，"),a("script",[n._v('除外。在下列两种情况下，浏览器将显示包含在<noscript>中的内容：</p>\n<p>--- 浏览器不支持脚本；</p>\n<p>--- 浏览器对脚本的支持被关闭。</p>\n<p>任何一个条件被满足，包含在<noscript>中的内容就会被渲染。否则，浏览器不会渲染<noscript>中的内容。</p>\n</blockquote>\n<h3 id="_5-、小结"><a class="header-anchor" href="#_5-、小结">#</a> 5 、小结</h3>\n<ul>\n<li>要包含外部JavaScript文件，必须将<code>src</code>属性设置为要包含文件的URL。文件可以跟网页在同一台服务器上，也可以位于完全不同的域。</li>\n<li>所有<code>&lt;script&gt;</code>元素会依照它们在网页中出现的次序被解释。在不使用<code>defer</code>和<code>async</code>属性的情况下，包含<code>&lt;script&gt;</code>元素中的代码必须严格按次序解释。</li>\n<li>对不推迟执行的脚本，浏览器必须解释完位于<code>&lt;script&gt;</code>元素中的代码，然后才能继续渲染页面的剩余部分。为此，通常应该把<code>&lt;script&gt;</code>元素放到页面末尾i，介于主内容之后及</body>标签之前。</li>\n<li>可以使用<code>async</code>属性表示脚本不需要等待其他脚本，同时也不阻塞文档渲染，即异步加载。异步脚本不能保证按照它们在页面中出现的次序执行。</li>\n<li>通过使用<code>&lt;noscript&gt;</code>元素，可以指定在浏览器不支持脚本时显示的内容。如果浏览器支持并启用脚本，则<code>&lt;noscript&gt;</code>元素中的任何内容都不会被渲染。</li>\n</ul>\n<h2 id="三、语言基础"><a class="header-anchor" href="#三、语言基础">#</a> 三、语言基础</h2>\n<h3 id="_1、语法"><a class="header-anchor" href="#_1、语法">#</a> 1、语法</h3>\n<h4 id="_1-1-区分大小写"><a class="header-anchor" href="#_1-1-区分大小写">#</a> 1.1 区分大小写</h4>\n<p>​\t 首先要知道的是，ECMAScript中一切都区分大小写。无论是变量、函数名还是操作符，都区分大小写。换句话说，变量<code>test</code>和变量<code>Test</code>是两个不同的变量。</p>\n<h4 id="_1-2-标识符"><a class="header-anchor" href="#_1-2-标识符">#</a> 1.2 标识符</h4>\n<p>​\t  <strong>标识符</strong>：就是变量、函数、属性或函数参数的名称。</p>\n<blockquote>\n<p>标识符可以由一或多个下列字符组成：</p>\n</blockquote>\n<ul>\n<li>\n<p>第一个字符必须是一个字母、下划线（<code>_</code>）或美元符号（<code>$</code>）;</p>\n</li>\n<li>\n<p>剩下的其他字符可以是字母、下划线、美元符号或数字。</p>\n<p>按照惯例，ECMAScript标识符使用驼峰大小写形式。例：<code>firstEscond</code></p>\n<p><strong>注意</strong>    关键字、保留字、<code>true</code> 、<code>false</code>和<code>null</code>不能作为标识符</p>\n</li>\n</ul>\n<h4 id="_1-3-注释"><a class="header-anchor" href="#_1-3-注释">#</a> 1.3 注释</h4>\n<p>ECMAScript采用C语言风格的注释，包括单行注释和块注释。</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code>  <span class="token comment">// 单行注释</span>\n  \n  <span class="token comment">/* 这是多行\n  注释*/</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h4 id="_1-4-严格模式"><a class="header-anchor" href="#_1-4-严格模式">#</a> 1.4  严格模式</h4>\n<p>​\t\t  ECMAScript 5增加了严格模式的概念。严格模式是一种不同的JavaScript解析和执行模式，ECMAScript 3的一些不规范写法在这种模式下会被处理。对于不安全的活动将抛出错误。要对整个脚本启用严格模式，在脚本开头加上这一行：</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token string">"user strict"</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>​\t\t   虽然看起来像没有赋值给任何变量的字符串，但它其实是一个预处理指令。任何支持的JavaScript引擎看到它都会切换到严格模式。选择这种语法形式的目的是不破坏ECMAScript 3语法。</p>\n<p>​\t\t   也可以单独指定一个函数在严格模式下执行，只要把这个预处理指令放到函数体开头即可：</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token string">"use strict"</span><span class="token punctuation">;</span>\n    <span class="token comment">// 函数体</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 所有现代浏览器都支持严格模式。</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h4 id="_1-5-语句"><a class="header-anchor" href="#_1-5-语句">#</a> 1.5  语句</h4>\n<p>​\t\t  ECMAScript中的语句以分号结尾。省略分号意味着由解析器确定语句在哪里结尾，如下所示：</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token keyword">let</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b\t\t\t<span class="token comment">// 没有加分号也有效，但不推荐</span>\n<span class="token keyword">let</span> diff <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>\t\t<span class="token comment">// 加分号有效，推荐</span>\n\n<span class="token comment">// 记着加分号有助于防止省略造成的问题，比如可以避免输入内容不完整</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>​\t\t if之类的控制语句只在执行多条语句时要求必须有代码块。不过最佳实践是始终在控制语句中使用代码块，即使要执行的只有一条语句，如下例所示：</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token comment">// 有效，但容易导致错误，应该避免</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 推荐</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 在控制语句中使用代码块可以让你内容更清晰，在需要修改代码时也可以减少出错的可能性</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h3 id="_2、关键字与保留字"><a class="header-anchor" href="#_2、关键字与保留字">#</a> 2、关键字与保留字</h3>\n<p>​\t\tECMA-262描述了一组保留的<strong>关键字</strong>，这些关键字有特殊用途。比如表示控制语句的开始和结束，或者执行特定的操作。按照规定，保留的关键字不能用座标识符或属性名。ECMA-262第6版规定的所有关键字如下：</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code>berak\t\t<span class="token keyword">do</span>\t\t\t<span class="token keyword">in</span>\t\t\t<span class="token keyword">typeof</span>\t\t<span class="token keyword">case</span>\t\t<span class="token keyword">else</span>\t\t<span class="token keyword">instanceof</span>\t\t<span class="token class-name">var</span>\t\n<span class="token keyword">catch</span>\t\t<span class="token keyword">export</span>\t\t <span class="token keyword">new</span>\t\t <span class="token class-name">void</span>\t\t <span class="token keyword">class</span>\t\t <span class="token class-name">extends</span>\t <span class="token keyword">return</span>\t\t\t <span class="token keyword">while</span>\n<span class="token keyword">const</span>\t\tfinally\t\t <span class="token keyword">super</span>\t\t <span class="token keyword">with</span>\t\t<span class="token keyword">continue</span>\t <span class="token keyword">for</span>\t\t <span class="token keyword">switch</span>\t\t \t <span class="token keyword">yield</span>\n<span class="token keyword">debugger</span>\t<span class="token keyword">function</span>\t <span class="token keyword">this</span>\t\t <span class="token keyword">default</span>\t<span class="token keyword">if</span>\t\t\t <span class="token keyword">throw</span>\t\t <span class="token keyword">delete</span>\t\t\t<span class="token keyword">import</span>\n<span class="token keyword">try</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h3 id="_3、变量"><a class="header-anchor" href="#_3、变量">#</a> 3、变量</h3>\n<p>​\t\tECMAScript变量是松散型的，意思变量是可以用于保存任何类型的数据。每个变量只不过是一个用于保存任意值的命名占位符。有3个关键字可以声明变量： <code>var</code>、<code>const</code>和<code>let</code>。其中, <code>var</code>在ECMAScript的所有版本中都可以使用，而<code>const</code>和<code>let</code> 只能在ECMAScript 6及更晚的版本中使用。</p>\n<h4 id="_3-1、var关键字"><a class="header-anchor" href="#_3-1、var关键字">#</a> 3.1、var关键字</h4>\n<p>​\t\t\t①  <code>var</code> 声明作用域</p>\n<p>​\t\t\t使用<code>var</code>操作符定义的变量会成为包含它的函数的局部变量。比如，使用<code>var</code>在一个函数内部定义一个变量，就意味着该变量将在函数退出时被销毁：</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">"hi"</span><span class="token punctuation">;</span> <span class="token comment">// 局部变量</span>\n<span class="token punctuation">}</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 出错</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>​\t\t②  <code>var</code>声明提前</p>\n<p>​\t\t使用<code>var</code>时，下面的代码不会报错。这是因为使用这个关键字声明的变量会自动提升到函数作用域顶部：</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n\n<span class="token comment">// 之所以不会报错，是因为ECMAScript运行时把它看成等价如下代码：</span>\n\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> age<span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    age <span class="token operator">=</span> <span class="token number">26</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h4 id="_3-2、-let-声明"><a class="header-anchor" href="#_3-2、-let-声明">#</a> 3.2、  let 声明</h4>\n<p>​\t<code>let</code>跟<code>var</code>的作用差不多，但有着非常重要的区别。最明显的区别是，<code>let</code>声明的范围是块作用域，而<code>var</code>声明的范围是函数作用域。</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">\'Matt\'</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">// Matt</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\t\t<span class="token comment">// Matt</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">// 26</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">// ReferenceError: age没有定义</span>\n\n<span class="token comment">// 在这里，age 变量之所以不能在if块外部被引用，是因为它的作用域仅限于该块的内部。块作用域是函数作用域的子集。因此适用于var的作用域限制同样也适用于let。</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>​\t\t当然，JavaScript引擎会记录用于变量声明的标识符及其所在块作用域，因此嵌套使用相同的标识符不会报错，而这是因为同一个块中没有重复声明：</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">\'Nicholas\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">//\t\'Nicholas\'</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">\'Matt\'</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">//\t\'Matt\'</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">//\t30</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">//\t26</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 对声明冗余报错不会因混用let和var而受影响。这两个关键字声明的并不是不同类型的变量，它们只是指出变量在相关作用域如何存在。</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>​\t①  暂死性死区</p>\n<p>​\t\t<code>let</code>与<code>var</code>的另一个重要的区别，就是<code>let</code>声明的变量不会再作用域中被提升。在<code>let</code>声明之前的执行瞬间被称为“暂死性死区”，在此阶段引用任何后面才声明的变量都会抛出<code>ReferenceError</code>。</p>\n<p>​\t②  全局声明</p>\n<p>​\t\t 与<code>var</code>关键字不同，使用<code>let</code>在全局作用域中声明的变量不会成为<code>window</code>对象的属性（<code>var</code>声明的变量则会）。</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">\'Matt\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">// \'Matt\'</span>\n\n<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">26</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">//  undefined</span>\n\n<span class="token comment">// 不过，let声明仍然是在全局作用域中发生的，相应变量会在页面的生命周期内存续。因此，为了避免SyntaxError,必须确保页面不会重复声明同一个变量。</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>​</p>\n<p>​\t\t③  条件声明</p>\n<p>​\t\t\t 在使用<code>var</code>声明变量时，由于声明会被提升，JavaScript引擎会自动将多余的声明在作用域顶部合并为一个声明。因为<code>let</code>的作用域是块，所以不可能检查前面是否已经使用<code>let</code>声明过变量，同时也就不可能在没声明的情况下引用它</p>\n<p>​\t\t④  <code>for</code>循环中的<code>let</code>声明</p>\n<blockquote>\n<p>在<code>let</code>出现之前，<code>for</code>循环定义的迭代变量会渗透到循环外部：</p>\n</blockquote>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 循环逻辑</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<blockquote>\n<p>改成使用<code>let</code>之后，这个问题就消失了，因为迭代变量的作用域仅限于<code>for</code>循环内部：</p>\n</blockquote>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 循环逻辑</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ReferenceError: i没有定义</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>​\t\t\t在使用<code>var</code>的时候，最常见的问题就是对迭代变量的奇特声明和修改：</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 你可能以为会输出0、1、2、3、4</span>\n<span class="token comment">// 实际上会输出5、5、5、5、5</span>\n\n<span class="token comment">// 之所以会这样，是因为在退出循环时，迭代变量保存的是导致循环退出的值：5。在之后执行超时逻辑时，所有的 i 都是同一个变量，因而输出的都是同一个最终值。</span>\n\n\n<span class="token comment">// 而在使用 let 声明迭代变量时，JavaScript引擎在后台会为每个迭代循环声明一个新的迭代变量。每个 setTimeout 引用的都是不同的变量实例，所以 console.log 输出的是我们期望的值，也就是循环执行过程中每个迭代变量的值。</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 会输出0、1、2、3、4</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h4 id="_3-3、const声明"><a class="header-anchor" href="#_3-3、const声明">#</a> 3.3、const声明</h4>\n<p>​\t\t<code>const</code>的行为与<code>let</code>基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改<code>const</code>声明的变量会导致运行时错误。</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token comment">// const声明的作用域也是块</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">\'Matt\'</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">\'Nicholas\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Matt</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<blockquote>\n<p><code>const</code>声明的限制只适用于它指向变量的引用。换句话说，如果<code>const</code>变量引用的是一个对象，那么修改这个对象内部的属性并不违反<code>const</code> 的限制。</p>\n</blockquote>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nperson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">\'Matt\'</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h4 id="_3-4、声明风格及最佳实践"><a class="header-anchor" href="#_3-4、声明风格及最佳实践">#</a> 3.4、声明风格及最佳实践</h4>\n<p>​\t\tECMAScript 6增加<code>let</code>和 <code>const</code>从客观上为这门语言更精确地声明作用域和语义提供了更好的支持。从行为怪异的<code>var</code>所造成的各种问题，新的有助于提升代码质量的最佳实践也逐渐显现。</p>\n<p>​\t\t①、不使用<code>var</code></p>\n<p>​\t\t\t\t限制自己只使用<code>let</code>和<code>const</code>有助于提升代码质量，因为变量有了明确的作用域、声明位置以及不变的值。</p>\n<p>​\t\t②、<code>const</code>优先，<code>let</code>次之</p>\n<p>​\t\t\t\t使用<code>const</code>声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具提前发现不合法的赋值操作。应优先使用<code>const</code>来声明变量，只在提前知道未来会有修改时，再使用<code>let</code>。这样能让开发者更有信心地推断某些变量的值永远不会变，同时也能迅速发现因意外赋值导致的非预期行为。</p>\n<h3 id="_4、数据类型"><a class="header-anchor" href="#_4、数据类型">#</a> 4、数据类型</h3>\n<p>​\t\t\tECMAScript有6种简单数据类型（也称为原始类型）：<code>Undefined</code> 、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>和<code>Symbol</code>。<code>Symbol</code>（符号）是ECMAScript 6新增的。还有一种复杂数量类型叫 <code>Object</code>（对象）。<code>Object</code>是一种无序名值对的集合。因为在ECMAScript中不能定义自己的数据类型，所有值都可以用上述7种数据类型之一来表示。只有7种数据类型似乎不足以表示全部数据。但ECMAScript的数据很灵活，一种数据类型可以当作多种数据类型来使用。</p>\n<h4 id="_4-1-typeof操作符"><a class="header-anchor" href="#_4-1-typeof操作符">#</a> 4.1  <code>typeof</code>操作符</h4>\n<p>​\t\t<code>typeof</code>在某些情况下返回的结果可能会让人费解，但技术上讲还是正确的。比如，调用<code>typeof null</code>返回的是<code>object</code>。这是因为特殊值<code>null</code>被认为是一个空对象的引用。</p>\n<blockquote>\n<p>严格来讲，函数在ECMAScript中被认为是对象，并不代表一种数据类型。可是，函数也有自己特殊的属性。为此，就有必要通过<code>typeof</code>操作符来区分函数和其他对象。</p>\n</blockquote>\n<h4 id=""><a class="header-anchor" href="#">#</a> </h4>\n<h4 id="_4-2undefined类型"><a class="header-anchor" href="#_4-2undefined类型">#</a> 4.2\t<code>Undefined</code>类型</h4>\n<p>​\t\t\t<code>Undefined</code>类型只有一个值，就是特殊值<code>undefined</code>。当用<code>var</code>或<code>let</code>声明了变量但没有初始化时，就相当于给变量赋予了<code>undefined</code>值。</p>\n<blockquote>\n<p>包含undefined值的变量跟未定义变量是有区别的。</p>\n</blockquote>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token keyword">let</span> message<span class="token punctuation">;</span>\t\t<span class="token comment">// 这个变量被声明了，只是值为undefined</span>\n\n<span class="token comment">// 确保没有声明过这个变量</span>\n<span class="token comment">// let age</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">// "undefined"</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\t\t<span class="token comment">// 报错</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<blockquote>\n<p>在对未初始化的变量调用<code>typeof</code>时，返回的结果是<code>undefined</code>，但未声明的变量调用它时，返回的结果还是<code>undefined</code>，但对未声明的变量调用它时，返回的结果还是<code>undefined</code></p>\n</blockquote>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token keyword">let</span> message<span class="token punctuation">;</span>\t<span class="token comment">// 这个变量被声明了，只是值为undefined</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">// "undefined"</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>\t\t<span class="token comment">// "undefined"</span>\n\n<span class="token comment">// 无论声明还是未声明，typeof返回的都是字符串"undefined"。逻辑上讲这是对的，因为虽然严格来讲这两个变量存在根本性差异，但它对任何一个变量都不可能执行什么真正的操作。</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h4 id="_4-3null类型"><a class="header-anchor" href="#_4-3null类型">#</a> 4.3\t<code>Null</code>类型</h4>\n<p>​\t\t\t\t<code>Null</code>类型同样只有一个值，即特殊值<code>null</code>。逻辑上讲，<code>null</code>值表示一个空对象指针，这也是<code>typeof</code>传一个<code>null</code>会返回<code>object</code>的原因：</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> car<span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">// "object"</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h4 id="_4-4-boolean类型"><a class="header-anchor" href="#_4-4-boolean类型">#</a> 4.4 <code>Boolean</code>类型</h4>\n<p>​\t\t\t<code>Boolean</code>（布尔值）类型是ECMAScript中使用最频繁的类型之一。</p>\n<h4 id="_4-5-number类型"><a class="header-anchor" href="#_4-5-number类型">#</a> 4.5 <code>Number</code>类型</h4>\n<p>​\t\t\tECMAScript中最有意思的数据类型或许就是<code>Number</code>了。<code>Number</code>类型使用IEEE 754格式表示整数和浮点值。</p>\n<p>​\t\t\t①、浮点值</p>\n<p>​\t\t\t\t浮点值的精确度最高可达17位小数，但在算术计算中远不如整数精确。例如，0.1+0.2得到的不是0.3，二是0.300 000 000 000 000 04。由于这种微小的舍入错误，导致很难测试特定的浮点值。</p>\n<blockquote>\n<p><strong>注意</strong>\t之所以存在这种舍入错误，是因为使用了IEEE 754数值，这种错误并非ECMAScript所独有。其他使用相同格式的语言也有这个问题。</p>\n</blockquote>\n<p>​</p>\n<p>​\t\t\t②、值的范围</p>\n<p>​\t\t\t\t由于内存的限制，ECMAScript并不支持表示这个世界上的所有数值。ECMAScript可以表示的最小数值保存在<code>Number.MIN_VALUE</code>中，这个值在多数浏览器中是5e-324；可以表示的最大数值保存在<code>Number.MAX_VALUE</code>中，这个值在多数浏览器中是1.7976932349623157e+308。如果某个计算得到的数值超出了JavaScript可以表示的范围，那么这个数值会被自动转换为一个特殊的<code>Infinity</code>（无穷）值。负无穷大：-Infinity，正无穷大：Infinity。</p>\n<blockquote>\n<p>要确定一个值是不是有限大，可以使用<code>isFinite()</code></p>\n</blockquote>\n<h4 id="_4-6-string类型"><a class="header-anchor" href="#_4-6-string类型">#</a> 4.6 <code>String</code>类型</h4>\n<p>​\t\t<code>String</code>数据类型表示零或多个16位Unicode字符序列。</p>\n<p>​\t\t<code>null</code>和<code>undefined</code>值没有<code>toString()</code>方法，而<code>String()</code>方法有</p>\n<h4 id="_4-7-symbol类型"><a class="header-anchor" href="#_4-7-symbol类型">#</a> 4.7 <code>Symbol</code>类型</h4>\n<p>​\t\t<code>Symbol</code>是ECMAScript6新增的数据类型。符号是原始值，且符号实例唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险。</p>\n<h4 id="_4-8-object类型"><a class="header-anchor" href="#_4-8-object类型">#</a> 4.8 <code>Object</code>类型</h4>\n<p>​\t\t<code>ECMAScript</code>中的对象其实就是一组数据和功能的集合。对象通过<code>new</code>操作符后跟对象类型的名称来创建。通过创建<code>Object</code>类型的实例来创建自己的对象，给对象添加属性和方法。</p>\n<h3 id="_5、操作符"><a class="header-anchor" href="#_5、操作符">#</a> 5、操作符</h3>\n<h4 id="_5-1-一元操作符"><a class="header-anchor" href="#_5-1-一元操作符">#</a> 5.1 一元操作符</h4>\n<blockquote>\n<p>只操作一个值的操作符</p>\n</blockquote>\n<p>​\t①、递增/递减操作符</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code>num<span class="token operator">++</span>   <span class="token comment">//  先使用num再执行+1</span>\n<span class="token operator">++</span>num   <span class="token comment">//  直接使用num+1后的值</span>\n<span class="token punctuation">(</span><span class="token operator">--</span><span class="token punctuation">)</span> 同上\n \n<span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">\'2\'</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token string">\'z\'</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\ns1<span class="token operator">++</span> <span class="token comment">// 3，字符串有效数值形式- 转换为数值再应用改变，变量类型变为数值。</span>\ns2<span class="token operator">++</span> <span class="token comment">// NaN，字符串非有效数值形式- 转换为`NaN`，变量类型变为数值。</span>\nb<span class="token operator">++</span> <span class="token comment">// 1，布尔值- false转换为0，true转换为1,变量类型变为数值。</span>\nf<span class="token operator">--</span> <span class="token comment">// 0.1000000000000009(因为浮点型不精准)，浮点型- 加1或减1.</span>\no<span class="token operator">--</span> <span class="token comment">// -2，对象会调用`valueOf()`方法获取可以操作的值。得到值对应上述规则。如果`NaN`，调用`toString`并再次应用上述规则。 </span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>​\t②、一元加减</p>\n<blockquote>\n<p>一元加减由（+ -）表示，放在变量前头，对数值没任何影响</p>\n</blockquote>\n<h4 id="_5-2-位操作符"><a class="header-anchor" href="#_5-2-位操作符">#</a> 5.2 位操作符</h4>\n<blockquote>\n<p>用于数值的底层操作，也就是操作内存中表示数据的比特（位）</p>\n</blockquote>\n<p>​</p>\n<p>①、按位非</p>\n<blockquote>\n<p>用（~）表示，它的作用是对数值取反并减一。</p>\n</blockquote>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span> <span class="token comment">// 二进制</span>\n<span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token operator">~</span>num1<span class="token punctuation">;</span> <span class="token comment">// -26</span>\n\n<span class="token comment">// 和下面操作一样</span>\n<span class="token operator">-</span>num1 <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// -26</span>\n<span class="token comment">// 虽然返回结果一样，但是位操作符的速度快的多，因为位操作是在数值的底层表示上完成的。</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>②、按位与</p>\n<blockquote>\n<p>用（&amp;）表示，按位与操作在两个位都是1时返回1，在任何一位是0时返回0</p>\n</blockquote>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">25</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// 1</span>\n\n<span class="token comment">// 二进制计算过程：</span>\n\t<span class="token number">25</span> <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0001</span> <span class="token number">1001</span>\n  \t <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0011</span>\n   <span class="token constant">AND</span> <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0001</span>\n<span class="token comment">// 结果为 1</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>③、按位或</p>\n<blockquote>\n<p>用（|）表示，按位或操作在至少一位是1时返回1，两位都是0时返回0</p>\n</blockquote>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">25</span> <span class="token operator">|</span> <span class="token number">3</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// 27</span>\n\n<span class="token comment">// 二进制计算过程：</span>\n\t<span class="token number">25</span> <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0001</span> <span class="token number">1001</span>\n  \t <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0011</span>\n   <span class="token constant">AND</span> <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0001</span> <span class="token number">1011</span>\n<span class="token comment">// 结果为 27</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>④、按位异或</p>\n<blockquote>\n<p>用（^）表示，按位异或只在一位上是1的时候返回1（两位都是1或0，则返回0）</p>\n</blockquote>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">25</span> <span class="token operator">^</span> <span class="token number">3</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// 26</span>\n\n<span class="token comment">// 二进制计算过程：</span>\n\t<span class="token number">25</span> <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0001</span> <span class="token number">1001</span>\n  \t <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0011</span>\n   <span class="token constant">AND</span> <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0001</span> <span class="token number">1010</span>\n<span class="token comment">// 结果为 26</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>⑤、左移</p>\n<blockquote>\n<p>用（&lt;&lt;）表示，会按照指定的位数将数值的所有位向左移动。</p>\n</blockquote>\n<p>⑥、有符号右移</p>\n<blockquote>\n<p>用（&gt;&gt;）表示，会将数值的所有32位都向右移，同时保留符号。</p>\n</blockquote>\n<p>⑦、无符号右移</p>\n<h4 id="_5-3-布尔操作符"><a class="header-anchor" href="#_5-3-布尔操作符">#</a> 5.3 布尔操作符</h4>\n</ContentSlotsDistributor>\n</template>\n<script>元素有下列8个属性：\n\n- `async`：可选。表示应该立即开始下载脚本，但不能阻止 其他页面动作，比如下载资源或者等待其他脚本加载。只对外部脚本文件有效。\n- `charset`：可选。使用`src`属性指定的代码字符集。这个属性很少使用，因为大多数浏览器不在乎它的值。\n- `crossorigin`：可选。配置相关请求的CORS（跨域资源共享）设置。默认不使用CORS。`crossorigin="anonymous"`配置文件请求不必设置凭据标志。`crossorigin="use-credentials"`设置凭据标志，意味着出站请求会包含凭据。\n- `defer`：可选。表示在文档解析和显示完成后再执行脚本是没有问题的。只对外部脚本文件有效。在IE7及更早的版本中，对行内脚本也可以指定这个属性。\n- `integrity`：可选。允许比对接收到的资源和指定的加密签名以验证子资源完整性（SRI，Subresource Intergrity）。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于确保内容分发网络（CDN）不会提供恶意内容。\n- `src`：可选。表示包含要执行的代码的外部文件。\n- `type`：可选。代替`language`，表示代码块中脚本语言的内容类型\n\n`<script>`的使用方式有两种：\n\n1. 通过它直接在网页中嵌入JavaScript代码。\n\n   ```html\n   <script>\n       function sayHi() {\n           console.log("Hi !")\n       }\n   ')])])])])}),[],!1,null,null,null);s.default=e.exports}}]);